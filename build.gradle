buildscript {
  apply from: "${rootDir}/gradle/dependencies.gradle"

  repositories {
    maven { url 'https://plugins.gradle.org/m2' }
    //google()
    mavenCentral()
    //jcenter()
    maven {url'https://maven.aliyun.com/repository/google'}

    maven {url'https://maven.aliyun.com/repository/jcenter'}

    maven {url"https://jitpack.io"}
    maven {
      url 'https://api.mapbox.com/downloads/v2/releases/maven'
      authentication {
        basic(BasicAuthentication)
      }
      credentials {
        username = "mapbox"
        password = "sk.eyJ1IjoieWl3ZW4tMTk5MSIsImEiOiJja3JsdXM1MGExNDJzMzFsaXlvZGhib3hnIn0.it2VwQ6Y9M7VcJkbofY-6Q"
      }
    }
  }

  dependencies {
    classpath "net.ltgt.gradle:gradle-errorprone-plugin:2.0.2"

    dependencies.create(pluginDependencies.checkstyle) {
      transitive = false
    }

    classpath pluginDependencies.jacoco
    classpath pluginDependencies.errorprone
    classpath pluginDependencies.buildConfig
    classpath pluginDependencies.mapboxSdkRegistry
  }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs += ['-Xlint:all', '-Xlint:unchecked', 'autovaluegson.defaultCollectionsToEmpty:true']
}

allprojects {
  repositories {
    maven { url 'https://plugins.gradle.org/m2' }
    //google()
    mavenCentral()
    //jcenter()
    maven {url'https://maven.aliyun.com/repository/google'}

    maven {url'https://maven.aliyun.com/repository/jcenter'}

    maven {url"https://jitpack.io"}
    maven {
      url 'https://api.mapbox.com/downloads/v2/releases/maven'
      authentication {
        basic(BasicAuthentication)
      }
      credentials {
        username = "mapbox"
        password = "sk.eyJ1IjoieWl3ZW4tMTk5MSIsImEiOiJja3JsdXM1MGExNDJzMzFsaXlvZGhib3hnIn0.it2VwQ6Y9M7VcJkbofY-6Q"
      }
    }
    // uncomment if snapshots access is needed
    // maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
  }
}

subprojects {
  apply from: "${rootDir}/gradle/dependencies.gradle"
  apply plugin: 'java'
  apply plugin: 'idea'
  apply plugin: 'net.ltgt.errorprone'

  // Fixes issue with test resources not being found inside Intellij
  idea {
    module {
      testOutputDir = file('build/resources/test')
    }
  }

  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7

  dependencies {

    errorprone dependenciesList.errorprone

    // Test Dependencies
    //testCompile dependenciesList.junit
    testImplementation('junit:junit:4.13')
    testCompile dependenciesList.hamcrestJunit
    testCompile dependenciesList.mockito
    testCompile dependenciesList.googleTruth
  }
}

def TESTABLE_MODULES = ["services",
                        "services-core",
                        "services-directions",
                        "services-directions-models",
                        "services-geocoding",
                        "services-geojson",
                        "services-matching",
                        "services-matrix",
                        "services-optimization",
                        "services-route-tiles",
                        "services-speech",
                        "services-staticmap",
                        "services-tilequery",
                        "services-turf",
                        "services-directions-refresh",
                        "services-directions-refresh-models",
                        "services-isochrone"]

def RELEASE_MODULES = ["services",
                       "services-core",
                       "services-geojson",
                       "services-turf",
                       "services-directions-models",
                       "services-directions-refresh-models"]

subprojects { subproject ->

  tasks.withType(Jar) { jarTask ->
    if (!jarTask.name.endsWith("sourcesJar")) {
      jarTask.exclude("**/*.java")
    }
  }

  if (TESTABLE_MODULES.contains(subproject.name)) {
    afterEvaluate { project ->
      project.apply from: "${rootDir}/gradle/jacoco.gradle"
      project.apply from: "${rootDir}/gradle/checkstyle.gradle"
    }
  }

  if (RELEASE_MODULES.contains(subproject.name)) {
    subproject.apply from: "${rootDir}/gradle/publish.gradle"
    subproject.apply from: "${rootDir}/gradle/dependencies-graph.gradle"
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}